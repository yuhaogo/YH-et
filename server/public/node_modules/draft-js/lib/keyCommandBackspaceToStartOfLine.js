define('node_modules/draft-js/lib/keyCommandBackspaceToStartOfLine', function(require, exports, module) {

  var global = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule keyCommandBackspaceToStartOfLine
   * 
   */
  
  'use strict';
  
  var EditorState = require('node_modules/draft-js/lib/EditorState');
  
  var expandRangeToStartOfLine = require('node_modules/draft-js/lib/expandRangeToStartOfLine');
  var getDraftEditorSelectionWithNodes = require('node_modules/draft-js/lib/getDraftEditorSelectionWithNodes');
  var moveSelectionBackward = require('node_modules/draft-js/lib/moveSelectionBackward');
  var removeTextWithStrategy = require('node_modules/draft-js/lib/removeTextWithStrategy');
  
  function keyCommandBackspaceToStartOfLine(editorState) {
    var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {
      var selection = strategyState.getSelection();
      if (selection.isCollapsed() && selection.getAnchorOffset() === 0) {
        return moveSelectionBackward(strategyState, 1);
      }
  
      var domSelection = global.getSelection();
      var range = domSelection.getRangeAt(0);
      range = expandRangeToStartOfLine(range);
  
      return getDraftEditorSelectionWithNodes(strategyState, null, range.endContainer, range.endOffset, range.startContainer, range.startOffset).selectionState;
    }, 'backward');
  
    if (afterRemoval === editorState.getCurrentContent()) {
      return editorState;
    }
  
    return EditorState.push(editorState, afterRemoval, 'remove-range');
  }
  
  module.exports = keyCommandBackspaceToStartOfLine;

});
